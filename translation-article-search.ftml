[[include :scp-jp:credit:start |mode=no-rate]]
**タイトル:** 翻訳記事検索
**著者:** SCP財団
**作成年:** 2025
**ライセンス:** CC BY-SA 3.0
[[include :scp-jp:credit:end]]


[[html]]
<!--
MIT License

Copyright (c) 2025 - sendoh-oroka

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    body {
      font-family: sans-serif;
      color: #333;
    }

    .search-form {
      display: flex;
      justify-content: center;
      margin: 10px auto;
      width: 95%;
      height: 95%;
      margin: 15px auto 15px auto;
      font-size: 16px;
    }
    .search-form input[type="text"] {
      flex: 1;
      padding: 10px;
      font-size: 18px;
      border: 2px solid #ddd;
      border-radius: 5px 0 0 5px;
      outline: none;
      transition: border 0.3s ease;
    }
    .search-form input[type="text"]:focus {
      border-color: #007bff;
    }
    .search-form button {
      padding: 10px 20px;
      font-size: 18px;
      border: 2px solid #007bff;
      border-left: none;
      background-color: #007bff;
      color: #fff;
      border-radius: 0 5px 5px 0;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .search-form button:hover {
      background-color: #0056b3;
    }

    .container {
      max-width: 600px;
      margin: 50px auto;
      padding: 2%;
      width: 90%;
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 3px 4.5px rgba(0, 0, 0, 0.1);
      position: relative;
    }

    .page {
      background: #f6f7f8;
      margin: 9.8px auto;
      padding: 10px;
      width: 95%;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      border: none;
      font-size: 14px;
    }
    .page p {
      margin: 8px 0px;
    }
    .page a {
      font-weight: bold;
      color: #007BFF;
      text-decoration: none;
      transition: color 0.3s;
    }
    .page a:hover {
      color: #0056b3;
      text-decoration: underline;
    }
    .page .details {
      font-size: 12px;
      margin: 5px 0px;
      color: #666;
    }

    .untransPage {
      background: #e6e6e6;
      margin: 9.8px auto;
      width: 95%;
      padding: 5px 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      border: none;
      font-size: 14px;
    }
    .untransPage p {
      margin: 8px 0px;
      color: #666;
    }
    .untransPage a {
      font-weight: bold;
      color: #71a4d9;
      text-decoration: none;
      transition: color 0.3s;
    }
    .untransPage a:hover {
      text-decoration: underline;
    }

    .postDate {
      float: right;
      font-family: monospace;
      font-size: 12px;
    }

    #loading {
      display: none;
      position: absolute;
      bottom: -80px;
      left: 50%;
      transform: translate(-50%);
      z-index: 1000;
    }

    .spinner {
      width: 50px;
      height: 50px;
      border: 6px solid #f3f3f3;
      border-top: 6px solid #3498db;
      border-radius: 50%;
      animation: spin 1s cubic-bezier(0.42, 0, 0.58, 1) infinite;
      will-change: transform;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }

    .cromFooter {
      padding-top: 40px;
      padding-bottom: 10px;
      font-size: 12px;
      font-weight: bold;
      float: right;
    }
    .cromFooter a {
      color: #485fc7;
      text-decoration: none;
    }
    .cromFooter a:hover {
      color: #666;
      text-decoration: none;
    }
  </style>
</head>
<body>
  
  <div class="container">
    <div class="search-form">
      <input type="text" id="authorInput" placeholder="Wikidot IDを入力">
      <button id="searchButton">検索</button>
    </div>

    <div id="result"></div>

    <div id="loading">
      <div class="spinner"></div>
    </div>
  </div>

  <script>
    // 検索クエリ
    const query =`
      query enWorksQuery($author: String!, $afterID: ID) {
        user(name: $author) {
          attributedPages(
            sort: {
              key: CREATED_AT
              order: DESC
            }
            filter: { wikidotInfo: { category: { eq: "_default" } } },
            first: 50
            after: $afterID
          ) {
            edges {
              node {
                url
                wikidotInfo {
                  title
                  rating
                  createdAt
                }
                translations {
                  url
                  wikidotInfo {
                    title
                    rating
                    createdAt
                  }
                }
                translationOf {
                  url
                  wikidotInfo {
                    title
                    rating
                    createdAt
                  }
                  translations {
                    url
                    wikidotInfo {
                      title
                      rating
                      createdAt
                    }
                  }
                }
              }
            }
            pageInfo {
              hasNextPage
              endCursor
            }
          }
        }
      }
    `;

    // WikiURL辞書
    const wikiRegexes = [
      { pattern: /^http:\/\/scp-wiki\./, branch: "EN"},
      { pattern: /^http:\/\/wanderers-library\./, branch: "WL"},
      { pattern: /^http:\/\/scp-jp\./, branch: "JP"},
      { pattern: /^http:\/\/scp-wiki-cn\./, branch: "CN"},
      { pattern: /^http:\/\/lafundacionscp\./, branch: "ES"},
      { pattern: /^http:\/\/scpko\./, branch: "KO"},
      { pattern: /^http:\/\/scp-pl\./, branch: "PL"},
      { pattern: /^http:\/\/scpfoundation\./, branch: "RU"},
      { pattern: /^http:\/\/scp-zh-tr\./, branch: "ZH"},
      { pattern: /^http:\/\/scp-pt-br\./, branch: "PT"},
      { pattern: /^http:\/\/fondationscp\./, branch: "FR"},
      { pattern: /^http:\/\/fondazionescp\./, branch: "IT"},
      { pattern: /^http:\/\/scp-th\./, branch: "TH"},
      { pattern: /^http:\/\/scp-cs\./, branch: "CS"},
      { pattern: /^http:\/\/scp-wiki-de\./, branch: "DE"},
      { pattern: /^http:\/\/scp-vn\./, branch: "VN"},
      { pattern: /^http:\/\/scp-ukrainian\./, branch: "UR"},
      { pattern: /^http:\/\/scp-idn\./, branch: "ID"},
      { pattern: /^http:\/\/scp-int\./, branch: "INT"},
    ];

    // GraphQL API呼び出し用の関数
    const buildCromApiUrl = (query, variables) =>
      `https://api.crom.avn.sh/graphql?query=${encodeURIComponent(query)}&variables=${encodeURIComponent(JSON.stringify(variables))}`;

    async function executeQuery(author, afterID) {
      const variables = { author, afterID }
      const requestUrl = buildCromApiUrl(query, variables);

      const response = await fetch(requestUrl, {
        method: "GET",
        headers: { Accept: "application/json" }
      });

      if (!response.ok) {
        throw new Error(`HTTP Error: ${response.status}`);
      }
      const { data, errors } = await response.json();
      if (errors && errors.length > 0) {
        throw new Error("GraphQL errors: " + JSON.stringify(errors));
      }

      return data;
    }

    // 情報抽出関数
    function parseInfo(node, checkJP = false) {
      if (!node) return null;
      const articles = [];

      const addArticle = obj => {
        if (obj?.wikidotInfo) {
          articles.push({
            url: obj.url,
            title: obj.wikidotInfo.title,
            rating: obj.wikidotInfo.rating,
            createdAt: new Date(obj.wikidotInfo.createdAt),
            branch: null
          });
        }
      };

      addArticle(node);
      if (Array.isArray(node.translations)) {
        node.translations.forEach(addArticle);
      }
      if (node.translationOf) {
        addArticle(node.translationOf);
        if (Array.isArray(node.translationOf.translations)) {
          node.translationOf.translations.forEach(addArticle);
        }
      }

      if (articles.length === 0) return null;

      if (checkJP) {
        const jpArticle = articles.find(article => article.url.indexOf("http://scp-jp.") === 0);
        const wljpArticle = articles.find(article => article.url.indexOf("http://wanderers-library-jp.") === 0);
        if (jpArticle) {
          jpArticle.branch = "JP";
          return jpArticle;
        } else if (wljpArticle) {
          wljpArticle.branch = "WL-JP";
          return wljpArticle;
        } else {
          return null;
        }
      }

      const oriArticle = articles.reduce((earliest, article) => 
        article.createdAt < earliest.createdAt ? article : earliest, articles[0]
      );

      for (const {pattern, branch} of wikiRegexes) {
        if (pattern.test(oriArticle.url)) {
          oriArticle.branch = branch;
          return oriArticle.branch === "JP" ? null : oriArticle;
        }
      }

      return null;
    }

    const getOriInfo = (node) => parseInfo(node);
    const getJPinfo = (node) => parseInfo(node, true);

    // HTMLを生成する関数
    const formatDate = (date) =>
      `${date.getFullYear()}/${String(date.getMonth() + 1).padStart(2, '0')}/${String(date.getDate()).padStart(2, '0')}`;

    function buildPageHtml(node) {
      const oriInfo = getOriInfo(node);
      const jpInfo = getJPinfo(node);

      if(!jpInfo) {
        return `
          <div class="untransPage">
            <p><strong>${oriInfo.branch}:</strong> <a href="${oriInfo.url}" target="_blank">${oriInfo.title}</a><span class="postDate"> ${formatDate(oriInfo.createdAt)}投稿</span></p>
          </div>
        `;
      }

      return `
        <div class="page">
          <p><a href="${jpInfo.url}" target="_blank">${jpInfo.title}</a></p>
          <p class="details">
            <strong>原語版:</strong>
            <a href="${oriInfo.url}" target="_blank">${oriInfo.title}</a><span class="postDate"> ${formatDate(jpInfo.createdAt)}翻訳 ${formatDate(oriInfo.createdAt)}投稿</span>
          </p>
          <p class="details">
            <strong>${oriInfo.branch}:</strong> ${oriInfo.rating} / <strong>${jpInfo.branch}:</strong> ${jpInfo.rating}
          </p>
        </div>
      `;
    }

    // レスポンスからページ情報をレンタリングする関数
    function renderPages(pages) {
      const resultContainer = document.getElementById("result");

      // 初回検索時に検索結果が0件の場合
      if (!pages.length) {
        resultContainer.innerHTML = "<p>Wikidot IDが間違っています。</p>";
        return;
      }

      // 日付ソート・重複削除
      const processedUrls = new Set();
      const sortedPages = pages
        .map(page => {
          const oriInfo = getOriInfo(page.node);
          return { ...page, oriInfo};
        })
        .filter(({ oriInfo }) => {
          if (!oriInfo || processedUrls.has(oriInfo.url)) return false;
          processedUrls.add(oriInfo.url);
          return true;
        })
        .sort((a, b) => {
          return b.oriInfo.createdAt - a.oriInfo.createdAt;
        });

      const pagesHTML = sortedPages.map(({ node }) => buildPageHtml(node)).join("");
      resultContainer.innerHTML = pagesHTML;
    }

    // ローディングアニメーションを管理する関数
    function showLoading(show) {
      const loadingElement = document.getElementById("loading");
      loadingElement.style.display = show ? "block" : "none";
    }

    // 検索結果の取得とレンダリングを行う関数
    async function searchArticle(author) {
      let afterID = null;
      const allPages = [];
      showLoading(true);

      try {
        do {
          const response = await executeQuery(author, afterID);
          const pages = response.user.attributedPages.edges;
          const hasNextPage = response.user.attributedPages.pageInfo.hasNextPage;

          allPages.push(...pages);
          afterID = hasNextPage ? response.user.attributedPages.pageInfo.endCursor : null;
          if (afterID) await new Promise(resolve => setTimeout(resolve, 500));
        } while(afterID);

        renderPages(allPages);
      } catch (error) {
        console.error("検索に失敗しました", error);
        document.getElementById("result").innerHTML = "<p>エラーが発生しました。再度お試しください。</p>";
      } finally {
        showLoading(false);
      }
    }

    // DOM読み込み後の初期設定
    document.addEventListener("DOMContentLoaded", () => {
      const authorInput = document.getElementById("authorInput");
      const searchButton = document.getElementById("searchButton");
      const resultContainer = document.getElementById("result");

      // 初回検索時のイベント設定
      searchButton.addEventListener("click", () => {
        const author = authorInput.value.trim();
        if (!author) {
          alert("Wikidot IDを入力してください");
          return;
        }

        resultContainer.innerHTML = "";
        searchArticle(author);
      });

      authorInput.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
          searchButton.click();
        }
      });
    });
  </script>

  <footer class="cromFooter">
    <a href="https://crom.avn.sh/" target="_blank" rel="noopener">Powerd by Crom</a>
  </footer>
</body>
</html>
[[/html]]


+ 翻訳記事検索

[[[*https://crom.avn.sh|Crom API]]]のデータからEN著者のJP翻訳記事を検索します。ごく稀にCrom APIのデータが誤っているため、既訳記事が未訳扱いされることがあります。

+ 使い方

Wikidot IDを入力して検索ボタンを押すと、数秒後にその著者の記事一覧が出力されます。既訳記事は、翻訳記事のURL・原語版のURL・ENとJPの評価値・ENとJPの投稿日(翻訳記事投稿日)が出力されます。未訳記事は、原語版のURL・原語版の投稿日が出力されます。

+ その他

複数回「エラーが発生しました」と出る場合は、検索したWikidot IDとともにこのページのディスカッションにお願いします。

++* Change Log
[[div class="code"]]
Created by sendoh-oroka 2025
MIT License: https://github.com/sendoh-oroka/translationArticleSearch/blob/main/LICENSE

[1.0.0] - 2025-02-21
- Initial-release
[[/div]]
